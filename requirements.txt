gradio==3.41.1
langchain==0.1.14
PyYAML==6.0.1
ctransformers==0.2.5
faiss-cpu
fastapi>=0.96.0
ipykernel>=6.23.1
pypdf==3.8.1
python-box==7.0.1
git+https://github.com/UKPLab/sentence-transformers.git # for sentence transformer
uvicorn>=0.22.0
Flask~=2.2.2
torch
boto3~=1.28.23
gunicorn
python-dotenv==1.0.1
llama-cpp-python
pydantic==2.11.3
InstructorEmbedding==1.0.1
huggingface_hub>=0.23.2
transformers==4.43.4
tokenizers==0.19.1

####################################
# pip uninstall torch torchvision

# run nvidia-smi to check cuda version: it will be mentioned in top right corner like this: CUDA Version: 12.4 

## Use the following command to install the dev build of PyTorch that supports CUDA 12.4:
# pip install `
#   torch==2.6.0+cu124 `
#   torchvision==0.21.0+cu124 `
#   torchaudio==2.6.0+cu124 `
#   --extra-index-url https://download.pytorch.org/whl/cu124



# Dont run it: this is ideal command but it does not work: update cuda version at the end of line eg: cuda 12.4 version is cu124
# pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124 
# Reason of not working:
# The error you're encountering, specifically related to torchvision::nms and CUDA, indicates that your PyTorch installation may not have been built
# with CUDA support. Despite having a GPU-compatible device, the NMS (Non-Maximum Suppression) operation is not running on CUDA due to this mismatch.

# after installation run in python cmd:
# import torch
# print(torch.cuda.is_available())        # Should be True
# print(torch.cuda.get_device_name(0))    # Should show your GPU name

# all set to use gpu for general purpose

# to download llama-cpp-python and to make it compactible for gpu:
#     1) download and install cmake
#         https://cmake.org/download/

#     2) Step 2: Install Microsoft C++ Build Tools
#         Go to the Build Tools for Visual Studio page:
#         ðŸ‘‰ https://visualstudio.microsoft.com/visual-cpp-build-tools/

#         Download the installer (vs_BuildTools.exe) and run it.

#         In the installer:

#         Select "Desktop development with C++".

#         On the right side, make sure the following components are checked:

#         MSVC v143 - VS 2022 C++ x64/x86 build tools

#         Windows 10 SDK (or latest available)

#         C++ CMake tools for Windows

#         Click Install (this might take a few minutes depending on your internet connection).

    
#     3) Restart the laptop and then run this command which will 
    #    Detect your GPU + CUDA 12.4
    #    Compile the bindings locally using your C++ toolchain and CUDA toolkit

    #    check for numpy version it should be 1.26.4 (~1.) if not uninstall current one and install this version required for gradio and langchain
    #    pip install numpy==1.26.4
    #    pip install llama-cpp-python --no-deps --force-reinstall --upgrade --no-binary :all:
    #    pip install diskcache

    #    after this run test_llm.py to check if I get ant response to the asked question for testing if it works.

####all set####
